train <- merge(training_agg, classe_group, by = "num_window")
setdiff(colnames(train), colnames(training_agg))
classe_group <- training %>% group_by(num_window, classe) %>% summarise()
train <- merge(training_agg, classe_group, by = "num_window")
setdiff(colnames(train), colnames(training_agg))
train$classe.x
train$classe.y
train$classe.x
classe_group <- training %>% group_by(num_window, classe) %>% summarise()
View(classe_group)
train <- merge(training_agg, classe_group, by.x = "num_window", by.y = "num_window")
setdiff(colnames(train), colnames(training_agg))
classe_group <- training %>% group_by(num_window, classe) %>% summarise()
train <- merge(training_agg, classe_group, by.x = "num_window", by.y = "num_window")
setdiff(colnames(train), colnames(training_agg))
train <- merge(training_agg, classe_group, by.x = "num_window")
train <- merge(training_agg, classe_group, by.x = "num_window", by.y = "classe")
train <- merge(training_agg, classe_group, by = "num_window", by.y = "classe")
train <- merge(training_agg, classe_group, by = "num_window")
setdiff(colnames(train), colnames(training_agg))
train <- left_join(training_agg, classe_group, by= "num_window")
setdiff(colnames(train), colnames(training_agg))
train <- merge(training_agg, classe_group[,"classe"], by = "num_window",)
train <- merge(training_agg, classe_group[,"classe"], by = "num_window")
train <- merge(training_agg, classe_group[,"classe"], by.x = "num_window")
setdiff(colnames(train), colnames(training_agg))
train <- merge(training_agg, classe_group, by.x = "num_window")
train <- merge(training_agg, classe_group, by = "num_window")
setdiff(colnames(train), colnames(training_agg))
colnames(train$classe.y) <-"classe"
colnames(train[,"classe.y"]) <-"classe"
train <- merge(training_agg, classe_group, by = "num_window")
colnames(train[,"classe.y"]) <-"classe"
colnames(train[,"classe.y"]) <-c("classe")
train <- merge(training_agg, classe_group, by = "num_window")
colnames(train[,"classe.y"])
train <- merge(training_agg, classe_group, by = "num_window")
colnames(train[,"classe.y"])
colnames(train$classe.y)
colnames(train)
colnames(train)[149]<-"classe"
colnames(train)[149]
train$classe.x <- NA
train$classe
train$classe.x <- NULL
glm_model <- glm(classe ~., data= train)
str(train)
train <- subset(train, select = -c(classe.x,num_window))
train <- merge(training_agg, classe_group, by = "num_window")
colnames(train)[149] <- "classe"
train <- subset(train, select = -c(classe.x,num_window))
str(train)
glm_model <- glm(classe ~., data= train)
str(train$classe)
unique(train$classe)
classe_group <- training %>% group_by(num_window, classe) %>% summarise()
train <- merge(training_agg, classe_group, by = "num_window")
colnames(train)[149] <- "classe"
train <- subset(train, select = -c(classe.x,num_window))
glm_model <- glm(classe ~., data= train)
glm_model <- glm(classe ~ . , data= train)
randomForest(class ~., data = train)
randomForest(classe ~., data = train)
control <- trainControl(method = "cv", number = 5)
fit_rpart <- train(classe ~ ., data = train, method = "rpart",
trControl = control)
print(fit_rpart, digits = 4)
randomForest(classe ~., data = train, na.action = na.omit)
model_rf <- randomForest(classe ~., data = train, na.action = na.omit)
model_rf <- randomForest(classe ~., data = train, na.action = na.omit, importance=T)
control <- trainControl(method = "cv", number = 10)
fit_rpart <- train(classe ~ ., data = train, method = "rpart",
trControl = control, na.action=na.omit)
install.packages("e1071")
control <- trainControl(method = "cv", number = 10)
fit_rpart <- train(classe ~ ., data = train, method = "rpart",
trControl = control, na.action=na.omit)
print(fit_rpart, digits = 4)
control <- trainControl(method = "cv", number = 10)
model_rf <- train(classe ~ ., data = train, method = "rpart",
trControl = control, na.action=na.omit)
print(model_rf, digits = 4)
model_rf <- randomForest(classe ~., data = train, na.action = na.omit, importance=T)
model_rf <- rfcv(classe ~., data = train, na.action = na.omit, importance=T)
train.x <- subset(train, select = -c(classe))
train.y <- subset(train, select = c(classe))
model_rf <- rfcv(train.x, train.y, cv.fold = 10, na.action = na.omit, importance=T)
model_rf <- rfcv(train.x, train.y, cv.fold = 10, na.action = na.omit)
model_rf <- rfcv(trainx = train.x, trainy = train.y, cv.fold = 10, na.action = na.omit)
model_rf <- rfcv(trainx = train.x, trainy = as.vector(train.y), cv.fold = 10, na.action = na.omit)
as.vector(train.y)
model_rf <- rfcv(trainx = train.x, trainy = train.y$classe, cv.fold = 10, na.action = na.omit)
na.omit(train)
train2<-na.omit(train)
train <- na.omit(subset(train, select = -c(classe.x,num_window)))
classe_group <- training %>% group_by(num_window, classe) %>% summarise()
train <- merge(training_agg, classe_group, by = "num_window")
colnames(train)[149] <- "classe"
train <- na.omit(subset(train, select = -c(classe.x,num_window)))
train.x <- subset(train, select = -c(classe))
train.y <- subset(train, select = c(classe))
model_rf <- rfcv(trainx = train.x, trainy = train.y$classe, cv.fold = 10, na.action = na.omit)
print(model_rf, digits = 4)
model_rf$error.cv
model_rf$n.var
model_rf <- rfcv(trainx = train.x, trainy = train.y$classe, cv.fold = 10, recursive = T)
model_rf$n.var
model_rf$error.cv
model_rf$predicted
model_rf$predicted$`73`
control <- trainControl(method = "cv", number = 10)
model_rf <- train(classe ~ ., data = train, method = "rpart",
trControl = control, na.action=na.omit)
model_rf <- train(classe ~ ., data = train, method = "rpart",
trControl = control, na.action=na.omit)
print(model_rf, digits = 4)
fancyRpartPlot(fit_rpart$finalModel)
install.packages("rpart.plot")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
suppressMessages(library(rpart.plot))
fancyRpartPlot(fit_rpart$finalModel)
suppressMessages(library(rpart.plot))
library(rpart.plot)
library(rpart)
suppressMessages(library(rpart))
suppressMessages(library(rpart.plot))
fancyRpartPlot(fit_rpart$finalModel)
suppressMessages(library(rattle))
fancyRpartPlot(fit_rpart$finalModel)
fancyRpartPlot(model_rf$finalModel)
suppressMessages(library(caret))
suppressMessages(library(randomForest))
suppressMessages(library(ggplot2))
suppressMessages(library(rattle))
suppressMessages(library(ModelMetrics))
suppressMessages(library(gbm))
suppressMessages(library(Hmisc))
suppressMessages(library(Hmisc))
suppressMessages(library(pgmm))
suppressMessages(library(forecast))
suppressMessages(library(rpart))
suppressMessages(library(rpart.plot))
setwd("C:/Repository/MachineLearning/PracticalMachineLearning")
if (!dir.exists("./data/")){
dir.create("./data/")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = "./data/training.csv")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile = "./data/testing.csv")
}
testing <- read.csv("./data/testing.csv")
for(i in names(training)){
training[which(training[,i] == "" | training[,i] == "#DIV/0!" | training[,i] == "NA"), i] <- NA
}
na_cols <- names(training[, apply(is.na(training), 2, all)])
factor_cols <- c("user_name","new_window")
date_cols <- c("cvtd_timestamp")
training[, c(factor_cols,"classe")] <- lapply(training[, c(factor_cols,"classe")], factor)
training[, date_cols] <- dmy_hm(training[, date_cols])
num_cols <- which(!names(training) %in% c(factor_cols,date_cols,"classe"))
testing[, factor_cols] <- lapply(testing[, factor_cols], factor)
testing[, num_cols] <- lapply(testing[, num_cols], as.numeric)
testing[, factor_cols] <- lapply(testing[, factor_cols], factor)
testing[, date_cols] <- dmy_hm(testing[, date_cols])
setwd("C:/Repository/MachineLearning/PracticalMachineLearning")
if (!dir.exists("./data/")){
dir.create("./data/")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = "./data/training.csv")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile = "./data/testing.csv")
}
training <- read.csv("./data/training.csv")
for(i in names(training)){
training[which(training[,i] == "" | training[,i] == "#DIV/0!" | training[,i] == "NA"), i] <- NA
}
for(i in names(training)){
training[which(training[,i] == "" | training[,i] == "#DIV/0!" | training[,i] == "NA"), i] <- NA
}
na_cols <- names(training[, apply(is.na(training), 2, all)])
training <- training[, !apply(is.na(training), 2, all)]
factor_cols <- c("user_name","new_window")
date_cols <- c("cvtd_timestamp")
training[, c(factor_cols,"classe")] <- lapply(training[, c(factor_cols,"classe")], factor)
training[, c(factor_cols,"classe")] <- lapply(training[, c(factor_cols,"classe")], factor)
training[, date_cols] <- dmy_hm(training[, date_cols])
suppressMessages(library(caret))
suppressMessages(library(randomForest))
suppressMessages(library(ggplot2))
suppressMessages(library(rattle))
suppressMessages(library(ModelMetrics))
suppressMessages(library(gbm))
suppressMessages(library(glmnet))
suppressMessages(library(Hmisc))
suppressMessages(library(pgmm))
suppressMessages(library(forecast))
suppressMessages(library(dplyr))
suppressMessages(library(lubridate))
suppressMessages(library(rpart))
suppressMessages(library(rpart.plot))
setwd("C:/Repository/MachineLearning/PracticalMachineLearning")
# Downloading data into a created directory if the directory does not exist.
if (!dir.exists("./data/")){
dir.create("./data/")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = "./data/training.csv")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile = "./data/testing.csv")
}
# Reading in the downloaded data
testing <- read.csv("./data/testing.csv")
training <- read.csv("./data/training.csv")
for(i in names(training)){
training[which(training[,i] == "" | training[,i] == "#DIV/0!" | training[,i] == "NA"), i] <- NA
}
na_cols <- names(training[, apply(is.na(training), 2, all)])
training <- training[, !apply(is.na(training), 2, all)]
factor_cols <- c("user_name","new_window")
date_cols <- c("cvtd_timestamp")
training[, c(factor_cols,"classe")] <- lapply(training[, c(factor_cols,"classe")], factor)
training[, date_cols] <- dmy_hm(training[, date_cols])
num_cols <- which(!names(training) %in% c(factor_cols,date_cols,"classe"))
training[, num_cols] <- lapply(training[, num_cols], as.numeric)
testing[, factor_cols] <- lapply(testing[, factor_cols], factor)
testing[, date_cols] <- dmy_hm(testing[, date_cols])
testing[, num_cols] <- lapply(testing[, num_cols], as.numeric)
training_sub <- subset(training, select = -c(X,user_name,raw_timestamp_part_1,raw_timestamp_part_2,cvtd_timestamp,new_window,classe))
training_agg <- training_sub %>% group_by(num_window) %>% summarise_each(funs(mean(., na.rm = TRUE)))
classe_group <- training %>% group_by(num_window, classe) %>% summarise()
train <- merge(training_agg, classe_group, by = "num_window")
colnames(train)[149] <- "classe"
suppressMessages(library(caret))
suppressMessages(library(randomForest))
suppressMessages(library(ggplot2))
suppressMessages(library(rattle))
suppressMessages(library(ModelMetrics))
suppressMessages(library(gbm))
suppressMessages(library(glmnet))
suppressMessages(library(Hmisc))
suppressMessages(library(pgmm))
suppressMessages(library(forecast))
suppressMessages(library(dplyr))
suppressMessages(library(lubridate))
suppressMessages(library(rpart))
suppressMessages(library(rpart.plot))
setwd("C:/Repository/MachineLearning/PracticalMachineLearning")
if (!dir.exists("./data/")){
dir.create("./data/")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = "./data/training.csv")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile = "./data/testing.csv")
}
testing <- read.csv("./data/testing.csv")
training <- read.csv("./data/training.csv")
for(i in names(training)){
training[which(training[,i] == "" | training[,i] == "#DIV/0!" | training[,i] == "NA"), i] <- NA
}
na_cols <- names(training[, apply(is.na(training), 2, all)])
training <- training[, !apply(is.na(training), 2, all)]
factor_cols <- c("user_name","new_window")
date_cols <- c("cvtd_timestamp")
training[, c(factor_cols,"classe")] <- lapply(training[, c(factor_cols,"classe")], factor)
training[, date_cols] <- dmy_hm(training[, date_cols])
num_cols <- which(!names(training) %in% c(factor_cols,date_cols,"classe"))
training[, num_cols] <- lapply(training[, num_cols], as.numeric)
testing[, factor_cols] <- lapply(testing[, factor_cols], factor)
testing[, date_cols] <- dmy_hm(testing[, date_cols])
testing[, num_cols] <- lapply(testing[, num_cols], as.numeric)
training_sub <- subset(training, select = -c(X,user_name,raw_timestamp_part_1,raw_timestamp_part_2,cvtd_timestamp,new_window,classe))
training_agg <- training_sub %>% group_by(num_window) %>% summarise_each(funs(mean(., na.rm = TRUE)))
classe_group <- training %>% group_by(num_window, classe) %>% summarise()
train <- merge(training_agg, classe_group, by = "num_window")
colnames(train)[148] <- "classe"
train <- na.omit(subset(train, select = -c(classe.x,num_window)))
train <- na.omit(subset(train, select = -c(num_window)))
train.x <- subset(train, select = -c(classe))
train.y <- subset(train, select = c(classe))
model_rf <- rfcv(trainx = train.x, trainy = train.y$classe, cv.fold = 10, recursive = T)
control <- trainControl(method = "cv", number = 10)
model_rf <- train(classe ~ ., data = train, method = "rpart",
trControl = control, na.action=na.omit)
model_rf <- train(classe ~ ., data = train, method = "rpart",
trControl = control, na.action=na.omit)
print(model_rf, digits = 4)
fancyRpartPlot(model_rf$finalModel)
fancyRpartPlot(model_rf)
control <- trainControl(method = "cv", number = 10)
model_rf <- train(classe ~ ., data = train, method = "rpart",
trControl = control, na.action=na.omit)
fancyRpartPlot(model_rf)
fancyRpartPlot(model_rf$finalModel)
predict_rpart <- predict(model_rf, testing)
View(testing)
(conf_rpart <- confusionMatrix(training$classe, predict_rpart))
predict_rpart <- predict(model_rf, testing)
(conf_rpart <- confusionMatrix(training$classe, predict_rpart))
(conf_rpart <- confusionMatrix(training$classe, predict_rpart))
predict_rpart
suppressMessages(library(caret))
suppressMessages(library(caret))
suppressMessages(library(randomForest))
suppressMessages(library(caret))
suppressMessages(library(randomForest))
suppressMessages(library(ggplot2))
suppressMessages(library(rattle))
suppressMessages(library(ModelMetrics))
suppressMessages(library(gbm))
suppressMessages(library(glmnet))
suppressMessages(library(Hmisc))
suppressMessages(library(pgmm))
suppressMessages(library(forecast))
suppressMessages(library(dplyr))
suppressMessages(library(lubridate))
suppressMessages(library(rpart))
suppressMessages(library(rpart.plot))
setwd("C:/Repository/MachineLearning/PracticalMachineLearning")
if (!dir.exists("./data/")){
dir.create("./data/")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = "./data/training.csv")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile = "./data/testing.csv")
}
testing <- read.csv("./data/testing.csv")
training <- read.csv("./data/training.csv")
for(i in names(training)){
training[which(training[,i] == "" | training[,i] == "#DIV/0!" | training[,i] == "NA"), i] <- NA
}
for(i in names(training)){
training[which(training[,i] == "" | training[,i] == "#DIV/0!" | training[,i] == "NA"), i] <- NA
}
na_cols <- names(training[, apply(is.na(training), 2, all)])
training <- training[, !apply(is.na(training), 2, all)]
factor_cols <- c("user_name","new_window")
date_cols <- c("cvtd_timestamp")
training[, c(factor_cols,"classe")] <- lapply(training[, c(factor_cols,"classe")], factor)
training[, date_cols] <- dmy_hm(training[, date_cols])
num_cols <- which(!names(training) %in% c(factor_cols,date_cols,"classe"))
training[, num_cols] <- lapply(training[, num_cols], as.numeric)
testing[, factor_cols] <- lapply(testing[, factor_cols], factor)
testing[, date_cols] <- dmy_hm(testing[, date_cols])
testing[, num_cols] <- lapply(testing[, num_cols], as.numeric)
training_sub <- subset(training, select = -c(X,user_name,raw_timestamp_part_1,raw_timestamp_part_2,cvtd_timestamp,new_window,classe))
training_agg <- training_sub %>% group_by(num_window) %>% summarise_each(funs(mean(., na.rm = TRUE)))
classe_group <- training %>% group_by(num_window, classe) %>% summarise()
train <- merge(training_agg, classe_group, by = "num_window")
colnames(train)[148] <- "classe"
train <- na.omit(subset(train, select = -c(num_window)))
train.x <- subset(train, select = -c(classe))
train.y <- subset(train, select = c(classe))
model_rf <- rfcv(trainx = train.x, trainy = train.y$classe, cv.fold = 10, recursive = T)
model_rf <- rfcv(trainx = train.x, trainy = train.y$classe, cv.fold = 10, recursive = T)
predict_rpart <- predict(model_rf, testing)
model_rf <- rfcv(trainx = train.x, trainy = train.y$classe, cv.fold = 10, recursive = T)
fancyRpartPlot(model_rf$finalModel)
control <- trainControl(method = "cv", number = 10)
model_rf <- train(classe ~ ., data = train, method = "rf", trControl = control, na.action=na.omit)
train <- subset(train, select = -c(num_window))
train <- merge(training_agg, classe_group, by = "num_window")
colnames(train)[148] <- "classe"
train <- subset(train, select = -c(num_window))
train.x <- subset(train, select = -c(classe))
train.y <- subset(train, select = c(classe))
print(model_rf, digits = 4)
control <- trainControl(method = "cv", number = 10)
model_rf <- train(classe ~ ., data = train, method = "rf", trControl = control, na.action=na.omit, preProcess=c("scale","centre"))
model_rf <- train(classe ~ ., data = train, method = "rf", trControl = control, na.action=na.omit, preProcess=c("scale","center"))
preproc <- preProcess(train, method = c("scale","center"), na.remove = T)
training_sub <- subset(training, select = -c(X,user_name,raw_timestamp_part_1,raw_timestamp_part_2,cvtd_timestamp,new_window,classe))
training_agg <- training_sub %>% group_by(num_window) %>% summarise_each(funs(mean(., na.rm = TRUE)))
classe_group <- training %>% group_by(num_window, classe) %>% summarise()
train <- merge(training_agg, classe_group, by = "num_window")
colnames(train)[148] <- "classe"
train <- subset(train, select = -c(num_window))
train.x <- subset(train, select = -c(classe))
train.y <- subset(train, select = c(classe))
control <- trainControl(method = "cv", number = 10)
preproc <- preProcess(train, method = c("scale","center"), na.remove = T)
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
install.packages("foreach")
install.packages("foreach")
suppressMessages(library(foreach))
preproc <- preProcess(train, method = c("scale","center","nzv"), na.remove = T)
---
title: "Practical Machine Learning - Project"
author: "Shaun"
date: "May 20, 2017"
output: html_document
---
## Download Data
```{r echo=TRUE}
suppressMessages(library(caret))
suppressMessages(library(randomForest))
suppressMessages(library(ggplot2))
suppressMessages(library(rattle))
suppressMessages(library(ModelMetrics))
suppressMessages(library(gbm))
suppressMessages(library(glmnet))
suppressMessages(library(Hmisc))
suppressMessages(library(pgmm))
suppressMessages(library(forecast))
suppressMessages(library(dplyr))
suppressMessages(library(lubridate))
suppressMessages(library(rpart))
suppressMessages(library(rpart.plot))
suppressMessages(library(foreach))
#setwd("D:/GitRepository/coursera/practicalmachinelearning/PracticalMachineLearning")
setwd("C:/Repository/MachineLearning/PracticalMachineLearning")
# Downloading data into a created directory if the directory does not exist.
if (!dir.exists("./data/")){
dir.create("./data/")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = "./data/training.csv")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile = "./data/testing.csv")
}
# Reading in the downloaded data
testing <- read.csv("./data/testing.csv")
training <- read.csv("./data/training.csv")
```
## Data Cleaning
```{r echo=TRUE}
for(i in names(training)){
training[which(training[,i] == "" | training[,i] == "#DIV/0!" | training[,i] == "NA"), i] <- NA
}
na_cols <- names(training[, apply(is.na(training), 2, all)])
training <- training[, !apply(is.na(training), 2, all)]
factor_cols <- c("user_name","new_window")
date_cols <- c("cvtd_timestamp")
training[, c(factor_cols,"classe")] <- lapply(training[, c(factor_cols,"classe")], factor)
training[, date_cols] <- dmy_hm(training[, date_cols])
num_cols <- which(!names(training) %in% c(factor_cols,date_cols,"classe"))
training[, num_cols] <- lapply(training[, num_cols], as.numeric)
testing[, factor_cols] <- lapply(testing[, factor_cols], factor)
testing[, date_cols] <- dmy_hm(testing[, date_cols])
testing[, num_cols] <- lapply(testing[, num_cols], as.numeric)
```
## Data Exploration
```{r echo=TRUE}
training_sub <- subset(training, select = -c(X,user_name,raw_timestamp_part_1,raw_timestamp_part_2,cvtd_timestamp,new_window,classe))
training_agg <- training_sub %>% group_by(num_window) %>% summarise_each(funs(mean(., na.rm = TRUE)))
classe_group <- training %>% group_by(num_window, classe) %>% summarise()
train <- merge(training_agg, classe_group, by = "num_window")
colnames(train)[148] <- "classe"
train <- subset(train, select = -c(num_window))
train.x <- subset(train, select = -c(classe))
train.y <- subset(train, select = c(classe))
```
## Model Testing
```{r echo=TRUE}
#model_rf <- rfcv(trainx = train.x, trainy = train.y$classe, cv.fold = 10, recursive = T)
control <- trainControl(method = "cv", number = 10)
preproc <- preProcess(train, method = c("scale","center","nzv"), na.remove = T)
model_rf <- train(classe ~ ., data = train, method = "rf", trControl = control, na.action=na.omit)
print(model_rf, digits = 4)
fancyRpartPlot(model_rf)
# predict outcomes using validation set
predict_rpart <- predict(model_rf, testing)
predict_rpart
# Show prediction result
conf_rpart <- confusionMatrix(training$classe, predict_rpart)
```
preproc <- preProcess(train, method = c("scale","center","nzv"), na.remove = T)
model_rf <- train(classe ~ ., data = train, method = "rf", trControl = control, na.action=na.omit, preProcess = preproc)
train_preproc <- predict(preproc, train)
test_preproc <- predict(preproc, test)
test_preproc <- predict(preproc, testing)
View(test_preproc)
View(train_preproc)
preproc <- preProcess(train, method = c("scale","center","nzv","corr"), na.remove = T)
preproc <- preProcess(train, method = c("scale","center","zv","nzv","corr"), na.remove = T)
preproc <- preProcess(train, method = c("scale","center","zv","nzv"), na.remove = T)
train_preproc <- predict(preproc, train)
View(train_preproc)
preproc <- preProcess(train, method = c("scale","center","zv","nzv"), na.remove = T)
train_preproc <- predict(preproc, train)
test_preproc <- predict(preproc, testing)
control <- trainControl(method = "cv", number = 10)
model_rf <- train(classe ~ ., data = train_preproc, method = "rf", trControl = control, na.action=na.omit)
print(model_rf, digits = 4)
fancyRpartPlot(model_rf)
fancyRpartPlot(model_rf$finalModel)
predict_rpart <- predict(model_rf, test_preproc)
preproc <- preProcess(train, method = c("scale","center","zv","nzv"), na.remove = T)
train_preproc <- predict(preproc, train)
test_preproc <- predict(preproc, testing)
model_rf <- train(classe ~ ., data = train_preproc, method = "rf", na.action=na.omit)
print(model_rf, digits = 4)
fancyRpartPlot(model_rf)
fancyRpartPlot(model_rf$finalModel)
fancyRpartPlot(model_rf)
fancyRpartPlot(model_rf$modelInfo)
fancyRpartPlot(model_rf$finalModel$forest)
fancyRpartPlot(model_rf$finalModel$forest$xbestsplit)
plot(model_rf$finalModel$forest$xbestsplit)
model_rf$finalModel$forest$xbestsplit
plot(model_rf)
plot(model_rf$finalModel)
plot(model_rf$finalModel$)
plot(model_rf$finalModel$importance)
model_rf$finalModel$importance
plot(model_rf$finalModel$importance)
varImpPlot(model_rf)
varImpPlot(model_rf$finalModel)
varImpPlot(model_rf$finalModel$importance)
model_rf <- randomForest(classe ~., data=train_preproc, importance=T)
model_rf <- randomForest(classe ~., data=train_preproc, importance=T, na.action = na.omit)
model_rf <- randomForest(classe ~., data=train_preproc, importance=T, na.action = na.omit)
control <- trainControl(method = "cv", number = 10)
model_rpart <- train(classe ~ ., data = train_preproc, method = "rpart", trControl = control, na.action=na.omit)
plot(model_rpart)
varImpPlot(model_rf)
fancyRpartPlot(model_rpart$finalModel)
preproc <- preProcess(train, method = c("scale","center","zv","nzv"), na.remove = TRUE)
train_preproc <- predict(preproc, train)
test_preproc <- predict(preproc, testing)
model_rf <- randomForest(classe ~., data=train_preproc, importance=T, na.action = na.omit)
print(model_rf, digits = 4)
